/**
 * This file was automatically generated by fastify-extract-definitions.
 * DO NOT MODIFY IT BY HAND. Instead, modify the fastify routes schemas
 * and re-run project to regenerate this file.
 */
import {
  ContextConfigDefault,
  FastifyInstance,
  FastifyLoggerInstance,
  FastifyRequest,
  FastifySchema,
  FastifyTypeProvider,
  FastifyTypeProviderDefault,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerBase,
  RawServerDefault,
} from 'fastify';
import { FastifyReply } from 'fastify/types/reply';
import { RouteGenericInterface } from 'fastify/types/route';
import {
  FastifyRequestType,
  ResolveFastifyReplyReturnType,
  ResolveFastifyRequestType,
} from 'fastify/types/type-provider';

export type RouteHandlerMethod<
  RawServer extends RawServerBase = RawServerDefault,
  RawRequest extends RawRequestDefaultExpression<RawServer> = RawRequestDefaultExpression<RawServer>,
  RawReply extends RawReplyDefaultExpression<RawServer> = RawReplyDefaultExpression<RawServer>,
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault,
  SchemaCompiler extends FastifySchema = FastifySchema,
  TypeProvider extends FastifyTypeProvider = FastifyTypeProviderDefault,
  RequestType extends FastifyRequestType = ResolveFastifyRequestType<
    TypeProvider,
    SchemaCompiler,
    RouteGeneric
  >,
  Logger extends FastifyLoggerInstance = FastifyLoggerInstance
> = (
  this: FastifyInstance<RawServer, RawRequest, RawReply, Logger, TypeProvider>,
  request: FastifyRequest<
    RouteGeneric,
    RawServer,
    RawRequest,
    SchemaCompiler,
    TypeProvider,
    ContextConfig,
    RequestType,
    Logger
  >,
  reply: FastifyReply<
    RawServer,
    RawRequest,
    RawReply,
    RouteGeneric,
    ContextConfig,
    SchemaCompiler,
    TypeProvider,
    RouteGeneric['Reply']
  >
) => ResolveFastifyReplyReturnType<TypeProvider, SchemaCompiler, RouteGeneric>;

export type Handler<
  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,
  ContextConfig = ContextConfigDefault
> = RouteHandlerMethod<
  RawServerDefault,
  RawRequestDefaultExpression,
  RawReplyDefaultExpression,
  RouteGeneric,
  ContextConfig
>;

export type RootGetReply = RootGetReplyStatus200;

export type EnumsEnvironment = 'local' | 'production';

export type EnumsMode = 'production' | 'development' | 'undefined';

export type TaskPostReply = TaskPostReplyStatus200;

export interface API {
  '*': {
    OPTIONS: RootOptions;
  };
  '/': {
    GET: RootGet;
  };
  '/admin/queues': {
    GET: AdminQueuesGet;
  };
  '/admin/queues/': {};
  '/admin/queues/api/queues': {
    GET: AdminQueuesApiQueuesGet;
  };
  '/admin/queues/api/queues/:queueName/:jobId/clean': {
    PUT: AdminQueuesApiQueuesQueueNameJobIdCleanPut;
  };
  '/admin/queues/api/queues/:queueName/:jobId/logs': {
    GET: AdminQueuesApiQueuesQueueNameJobIdLogsGet;
  };
  '/admin/queues/api/queues/:queueName/:jobId/promote': {
    PUT: AdminQueuesApiQueuesQueueNameJobIdPromotePut;
  };
  '/admin/queues/api/queues/:queueName/:jobId/retry': {
    PUT: AdminQueuesApiQueuesQueueNameJobIdRetryPut;
  };
  '/admin/queues/api/queues/:queueName/clean/:queueStatus': {
    PUT: AdminQueuesApiQueuesQueueNameCleanQueueStatusPut;
  };
  '/admin/queues/api/queues/:queueName/pause': {
    PUT: AdminQueuesApiQueuesQueueNamePausePut;
  };
  '/admin/queues/api/queues/:queueName/resume': {
    PUT: AdminQueuesApiQueuesQueueNameResumePut;
  };
  '/admin/queues/api/queues/:queueName/retry': {
    PUT: AdminQueuesApiQueuesQueueNameRetryPut;
  };
  '/admin/queues/api/redis/stats': {
    GET: AdminQueuesApiRedisStatsGet;
  };
  '/admin/queues/queue/:queueName': {
    GET: AdminQueuesQueueQueueNameGet;
  };
  '/admin/queues/static/*': {
    GET: AdminQueuesStaticAllGet;
  };
  '/swagger': {
    GET: SwaggerGet;
  };
  '/swagger/': {};
  '/swagger/*': {
    GET: SwaggerAllGet;
  };
  '/swagger/initOAuth': {
    GET: SwaggerInitOAuthGet;
  };
  '/swagger/json': {
    GET: SwaggerJsonGet;
  };
  '/swagger/static/*': {
    GET: SwaggerStaticAllGet;
  };
  '/swagger/uiConfig': {
    GET: SwaggerUiConfigGet;
  };
  '/swagger/yaml': {
    GET: SwaggerYamlGet;
  };
  '/task': {
    POST: TaskPost;
  };
}

export interface RootOptions {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

/**
 * Get API status
 */
export interface RootGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: RootGetReply;
}

export interface RootGetReplyStatus200 {
  environment: EnumsEnvironment;
  mode: EnumsMode;
  version: string;
}

export interface AdminQueuesGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameJobIdCleanPut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameJobIdLogsGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameJobIdPromotePut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameJobIdRetryPut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameCleanQueueStatusPut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNamePausePut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameResumePut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiQueuesQueueNameRetryPut {
  Body: unknown;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesApiRedisStatsGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesQueueQueueNameGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface AdminQueuesStaticAllGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerAllGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerInitOAuthGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerJsonGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerStaticAllGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerUiConfigGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

export interface SwaggerYamlGet {
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: unknown;
}

/**
 * Task
 */
export interface TaskPost {
  Body: TaskPostBody;
  Querystring: unknown;
  Params: unknown;
  Headers: unknown;
  Reply: TaskPostReply;
}

export interface TaskPostBody {
  userId: string;
  limit: number;
  taskId: string;
  [k: string]: unknown;
}

export interface TaskPostReplyStatus200 {
  message: string;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "enums".
 */
export interface Enums {
  environment: EnumsEnvironment;
  mode: EnumsMode;
}

/**
 * This interface was referenced by `API`'s JSON-Schema
 * via the `definition` "errors".
 */
export interface Errors {
  simple: SimpleError;
}

/**
 * Error response
 */
export interface SimpleError {
  error: string;
  message?: string;
}
